var sqlite3 = require('sqlite3'),
    db = new sqlite3.Database('./donut_database.sqlite3');

// Create the database schema and populate
db.serialize(function() {
  // Create the users table.
  //
  // COLUMNS:
  // userID INTEGER PRIMARY KEY -- An int generated by SQL.
  // real_name TEXT -- Full name, e.g. "Christian Hughes"
  // phone_number TEXT -- Phone number as text, e.g. "9135555555"
  // email_address TEXT -- Email address as text. MAKE toLowerCase().
  // username_text TEXT -- Username (can be independent of realname). Probably shouldn't contain spaces.
  // password TEXT -- Encrypted password as text.
  // organization TEXT -- Name of the organization that the user is a part of.
  // donut_quality_rating REAL -- Quality of the donuts on a scale of 1 to 5 (floating point number).
  // donut_reliability_rating REAL -- Reliability of the user, as a real number from 0 to 100 (expressed as a precentage).
  // has_rated_this_week INTEGER -- Bool, 0 if false or 1 if true. Has this user rated the donut baron for the week?
  // is_donut_baron INTEGER -- Bool, 0 if false or 1 if true. Has the user rated this week's donut baron?
  // is_admin INTEGER) -- Bool, 0 if false or 1 if true. Is the user an admin?
  db.run("CREATE TABLE users (userID INTEGER PRIMARY KEY, real_name TEXT, phone_number TEXT, email_address TEXT, username_text TEXT, password TEXT, organization TEXT, donut_quality_rating REAL, donut_reliability_rating REAL, has_rated_this_week INTEGER, is_donut_baron INTEGER, is_admin INTEGER)");

  // Create the userList table. It Holds a chronooglical list of users, with the dates in which they will become the donut baron.
  //
  // listID INTEGER PRIMARY KEY -- Primary key for the table. Probably arbitrary.
  // date TEXT -- Date in which the user will become the donut baron, expressed as 'YYYY-MM-DD'.
  // userID INTEGER -- The userID of the assocated user. References users table.
  // FOREIGN KEY(userID) REFERENCES users(userID)) -- See above.
  db.run("CREATE TABLE upcomingList (listID INTEGER PRIMARY KEY, date TEXT, real_name TEXT, userID INTEGER, FOREIGN KEY(userID) REFERENCES users(userID))");

  // Create the comments table.
  //
  // commentID INTEGER PRIMARY KEY -- Arbitary primary key integer for each comment.
  // comment_content TEXT -- The actual textual content of each comment.
  // username TEXT - The username of the user that made the comment.
  // time_stamp INTEGER -- The time that the comment was posted. Format TBD.
  db.run("CREATE TABLE comments (commentID INTEGER PRIMARY KEY, comment_content TEXT, username TEXT, time_stamp INTEGER)");

  // Add three sample users.
  db.run("INSERT INTO users (real_name, phone_number, email_address, username_text, password, organization, donut_quality_rating, donut_reliability_rating, has_rated_this_week, is_donut_baron, is_admin)"
       + "VALUES ('Christian Hughes', '9139081592', 'cjhughes255@ksu.edu', 'cjhughes255', 'password1', 'KSU', '5', '100', '0', '1', '1')");
  db.run("INSERT INTO users (real_name, phone_number, email_address, username_text, password, organization, donut_quality_rating, donut_reliability_rating, has_rated_this_week, is_donut_baron, is_admin)"
      + "VALUES ('Adam Seiwert', '6208754366', 'seiwerta@ksu.edu', 'seiwerta', 'password2', 'KSU', '3', '70', '0', '0', '1')");
  db.run("INSERT INTO users (real_name, phone_number, email_address, username_text, password, organization, donut_quality_rating, donut_reliability_rating, has_rated_this_week, is_donut_baron, is_admin)"
      + "VALUES ('Austin Fangman', '8163510409', 'apfangman@ksu.edu', 'apfangman', 'password3', 'KSU', '1', '20', '1', '0', '1')");

  // Insert the users into the users list.
  db.run("INSERT INTO upcomingList (date, userID, real_name) VALUES ('2016-04-09', 2, 'Adam Seiwert')");
  db.run("INSERT INTO upcomingList (date, userID, real_name) VALUES ('2016-04-16', 3, 'Austin Fangman')");

  // Make a sample comment.
  db.run("INSERT INTO comments (comment_content, username) VALUES ('A sample comment', 'cjhughes255')");
});
